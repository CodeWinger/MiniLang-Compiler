Package MiniLangCompiler;

Helpers
  tab   = 9;
  cr    = 13;
  lf    = 10;
  digit = ['0'..'9'];
  lowercase = ['a'..'z'];
  uppercase = ['A'..'Z'];
  letter  = lowercase | uppercase;
  idletter = letter | '_';
  idchar  = letter | digit | '_';
  punctuation = '?' | '.' | ',' | '!' ;
  str = (letter | digit | punctuation | ' ')*;
  quote = '"';
  hashtag = '#';


Tokens
  eol   = cr | lf | cr lf;
  blank = ' ' | tab;

  equal = '=';
  if = 'if';
  then = 'then';
  else = 'else';
  endif = 'endif';
  while = 'while';
  do = 'do';
  done = 'done';
  print = 'print';
  read = 'read';
  var = 'var';
  int = 'int';
  float = 'float';
  string = 'string';
  semicolon = ';';
  colon = ':';

  comment = hashtag [[0 .. 0xffff] - [10 + 13]]* ( cr | lf | cr lf);

  star  = '*';
  slash = '/';
  plus  = '+';
  minus = '-';
  l_par = '(';
  r_par = ')';
  int_number  = '0'| [digit-'0'] digit*;
  float_number = '.' digit+ | '0' '.' digit* | [digit-'0'] digit* '.' digit*;

  id    = idletter idchar*;
  string_value = quote str quote;

Ignored Tokens
  blank, eol, comment;

Productions

    program {-> prog} = [decs]:declaration* [stmts]:statement*
                        {-> New prog.program([decs.decl], [stmts.stmt])};

    statement  {-> stmt} =   {assign}        id equal cst_exp semicolon
                       {-> New stmt.assign(id, cst_exp.exp)}
                | {if_else}        if cst_exp then statement* else [else_stmts]:statement* endif
                       {-> New stmt.ifelse(cst_exp.exp, [statement.stmt], [else_stmts.stmt])}
                | {if}              if cst_exp then statement* endif
                        {-> New stmt.if(cst_exp.exp, [statement.stmt])}
                | {while_id}     while cst_exp do statement* done
                        {-> New stmt.while(cst_exp.exp,[statement.stmt])}
                | {print}  print cst_exp semicolon
                        {-> New stmt.print(cst_exp.exp)}
                | {read}  read id semicolon
                        {-> New stmt.read(id)}; 

    declaration {-> decl} =   {int_dec}  var id colon int semicolon
                                    { -> New decl.int(id)}
                | {float_dec}  var id colon float semicolon
                                    { -> New decl.float(id)}
                | {string_dec} var id colon string semicolon
                                    { -> New decl.string(id)};

    


    cst_exp  {-> exp} = 
                  {cst_plus}    cst_exp plus factor 
                     {-> New exp.plus(cst_exp.exp,factor.exp)}
                | {cst_minus}   cst_exp minus factor 
                     {-> New exp.minus(cst_exp.exp,factor.exp)}
                | {factor}      factor
                     {-> factor.exp};

    factor  {-> exp} =
                  {cst_mult}    factor star sterm
                      {-> New exp.mult(factor.exp,sterm.exp)}
                | {cst_divd}    factor slash sterm 
                      {-> New exp.divd(factor.exp,sterm.exp)}
                | {sterm}        sterm
                      {-> sterm.exp};

    sterm {-> exp} =  {term} term
                        {-> term.exp} 
                   |  {sterm} minus sterm
                      {-> New exp.unary(sterm.exp)};
          
    term {-> exp} =
              {cst_id}      id 
                      {-> New exp.id(id)}
            | {cst_int}     int_number
                      {-> New exp.int(int_number)}
            | {cst_float}   float_number
                      {-> New exp.float(float_number)}
            | {cst_string} string_value 
                      {-> New exp.string(string_value)}
            |  {paren} l_par cst_exp r_par
                      {-> New exp.paren(cst_exp.exp)};

Abstract Syntax Tree

prog = {program} [d]:decl* [s]:stmt*;


stmt = 
    {while}   [l]:exp [r]:stmt*
    |{ifelse} [l]:exp [m]:stmt* [r]:stmt*
    |{if}      [l]:exp [r]:stmt*
    |{print}  exp
    |{read}   id
    |{assign} [l]:id [r]:exp;

decl = 
    {float}  id
    |{int}    id
    |{string} id;

exp = 
    {plus}     [l]:exp [r]:exp
  | {minus}    [l]:exp [r]:exp
  | {mult}     [l]:exp [r]:exp 
  | {divd}     [l]:exp [r]:exp 
  | {unary}    exp
  | {paren}    exp
  | {id}       id 
  | {int}   int_number
  | {float} float_number
  | {string} string_value;