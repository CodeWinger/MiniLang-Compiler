/* This file was generated by SableCC (http://www.sablecc.org/). */

package MiniLangCompiler.node;

import java.util.*;
import MiniLangCompiler.analysis.*;

@SuppressWarnings("nls")
public final class AWhileIdStatement extends PStatement
{
    private TWhile _while_;
    private PCstExp _cstExp_;
    private TDo _do_;
    private final LinkedList<PStatement> _statement_ = new LinkedList<PStatement>();
    private TDone _done_;

    public AWhileIdStatement()
    {
        // Constructor
    }

    public AWhileIdStatement(
        @SuppressWarnings("hiding") TWhile _while_,
        @SuppressWarnings("hiding") PCstExp _cstExp_,
        @SuppressWarnings("hiding") TDo _do_,
        @SuppressWarnings("hiding") List<?> _statement_,
        @SuppressWarnings("hiding") TDone _done_)
    {
        // Constructor
        setWhile(_while_);

        setCstExp(_cstExp_);

        setDo(_do_);

        setStatement(_statement_);

        setDone(_done_);

    }

    @Override
    public Object clone()
    {
        return new AWhileIdStatement(
            cloneNode(this._while_),
            cloneNode(this._cstExp_),
            cloneNode(this._do_),
            cloneList(this._statement_),
            cloneNode(this._done_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAWhileIdStatement(this);
    }

    public TWhile getWhile()
    {
        return this._while_;
    }

    public void setWhile(TWhile node)
    {
        if(this._while_ != null)
        {
            this._while_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._while_ = node;
    }

    public PCstExp getCstExp()
    {
        return this._cstExp_;
    }

    public void setCstExp(PCstExp node)
    {
        if(this._cstExp_ != null)
        {
            this._cstExp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._cstExp_ = node;
    }

    public TDo getDo()
    {
        return this._do_;
    }

    public void setDo(TDo node)
    {
        if(this._do_ != null)
        {
            this._do_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._do_ = node;
    }

    public LinkedList<PStatement> getStatement()
    {
        return this._statement_;
    }

    public void setStatement(List<?> list)
    {
        for(PStatement e : this._statement_)
        {
            e.parent(null);
        }
        this._statement_.clear();

        for(Object obj_e : list)
        {
            PStatement e = (PStatement) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._statement_.add(e);
        }
    }

    public TDone getDone()
    {
        return this._done_;
    }

    public void setDone(TDone node)
    {
        if(this._done_ != null)
        {
            this._done_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._done_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._while_)
            + toString(this._cstExp_)
            + toString(this._do_)
            + toString(this._statement_)
            + toString(this._done_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._while_ == child)
        {
            this._while_ = null;
            return;
        }

        if(this._cstExp_ == child)
        {
            this._cstExp_ = null;
            return;
        }

        if(this._do_ == child)
        {
            this._do_ = null;
            return;
        }

        if(this._statement_.remove(child))
        {
            return;
        }

        if(this._done_ == child)
        {
            this._done_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._while_ == oldChild)
        {
            setWhile((TWhile) newChild);
            return;
        }

        if(this._cstExp_ == oldChild)
        {
            setCstExp((PCstExp) newChild);
            return;
        }

        if(this._do_ == oldChild)
        {
            setDo((TDo) newChild);
            return;
        }

        for(ListIterator<PStatement> i = this._statement_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PStatement) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._done_ == oldChild)
        {
            setDone((TDone) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
