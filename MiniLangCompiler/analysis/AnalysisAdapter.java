/* This file was generated by SableCC (http://www.sablecc.org/). */

package MiniLangCompiler.analysis;

import java.util.*;
import MiniLangCompiler.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    @Override
    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    @Override
    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    @Override
    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    @Override
    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

    @Override
    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAProgram(AProgram node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAssignStatement(AAssignStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIfElseStatement(AIfElseStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIfStatement(AIfStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAWhileIdStatement(AWhileIdStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPrintStatement(APrintStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAReadStatement(AReadStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIntDecDeclaration(AIntDecDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFloatDecDeclaration(AFloatDecDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStringDecDeclaration(AStringDecDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACstPlusCstExp(ACstPlusCstExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACstMinusCstExp(ACstMinusCstExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFactorCstExp(AFactorCstExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACstMultFactor(ACstMultFactor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACstDivdFactor(ACstDivdFactor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATermFactor(ATermFactor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATermSterm(ATermSterm node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStermSterm(AStermSterm node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACstIdTerm(ACstIdTerm node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACstIntTerm(ACstIntTerm node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACstFloatTerm(ACstFloatTerm node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACstStringTerm(ACstStringTerm node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAParenTerm(AParenTerm node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEol(TEol node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBlank(TBlank node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEqual(TEqual node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIf(TIf node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTThen(TThen node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTElse(TElse node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEndif(TEndif node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTWhile(TWhile node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDo(TDo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDone(TDone node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPrint(TPrint node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRead(TRead node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTVar(TVar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTInt(TInt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFloat(TFloat node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTString(TString node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSemicolon(TSemicolon node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTColon(TColon node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTComment(TComment node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTStar(TStar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSlash(TSlash node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPlus(TPlus node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMinus(TMinus node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLPar(TLPar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRPar(TRPar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIntNumber(TIntNumber node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFloatNumber(TFloatNumber node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTId(TId node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTStringValue(TStringValue node)
    {
        defaultCase(node);
    }

    @Override
    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    @Override
    public void caseInvalidToken(InvalidToken node)
    {
        defaultCase(node);
    }

    public void defaultCase(@SuppressWarnings("unused") Node node)
    {
        // do nothing
    }
}
