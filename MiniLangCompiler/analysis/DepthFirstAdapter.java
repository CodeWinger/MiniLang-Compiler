/* This file was generated by SableCC (http://www.sablecc.org/). */

package MiniLangCompiler.analysis;

import java.util.*;
import MiniLangCompiler.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPProgram().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAProgram(AProgram node)
    {
        defaultIn(node);
    }

    public void outAProgram(AProgram node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProgram(AProgram node)
    {
        inAProgram(node);
        {
            List<PDeclaration> copy = new ArrayList<PDeclaration>(node.getDeclaration());
            for(PDeclaration e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PStatement> copy = new ArrayList<PStatement>(node.getStatement());
            for(PStatement e : copy)
            {
                e.apply(this);
            }
        }
        outAProgram(node);
    }

    public void inAAssignStatement(AAssignStatement node)
    {
        defaultIn(node);
    }

    public void outAAssignStatement(AAssignStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignStatement(AAssignStatement node)
    {
        inAAssignStatement(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        if(node.getCstExp() != null)
        {
            node.getCstExp().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAAssignStatement(node);
    }

    public void inAIfElseStatement(AIfElseStatement node)
    {
        defaultIn(node);
    }

    public void outAIfElseStatement(AIfElseStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfElseStatement(AIfElseStatement node)
    {
        inAIfElseStatement(node);
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        if(node.getCstExp() != null)
        {
            node.getCstExp().apply(this);
        }
        if(node.getThen() != null)
        {
            node.getThen().apply(this);
        }
        {
            List<PStatement> copy = new ArrayList<PStatement>(node.getStatement());
            for(PStatement e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        {
            List<PStatement> copy = new ArrayList<PStatement>(node.getElseStmts());
            for(PStatement e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getEndif() != null)
        {
            node.getEndif().apply(this);
        }
        outAIfElseStatement(node);
    }

    public void inAIfStatement(AIfStatement node)
    {
        defaultIn(node);
    }

    public void outAIfStatement(AIfStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfStatement(AIfStatement node)
    {
        inAIfStatement(node);
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        if(node.getCstExp() != null)
        {
            node.getCstExp().apply(this);
        }
        if(node.getThen() != null)
        {
            node.getThen().apply(this);
        }
        {
            List<PStatement> copy = new ArrayList<PStatement>(node.getStatement());
            for(PStatement e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getEndif() != null)
        {
            node.getEndif().apply(this);
        }
        outAIfStatement(node);
    }

    public void inAWhileIdStatement(AWhileIdStatement node)
    {
        defaultIn(node);
    }

    public void outAWhileIdStatement(AWhileIdStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWhileIdStatement(AWhileIdStatement node)
    {
        inAWhileIdStatement(node);
        if(node.getWhile() != null)
        {
            node.getWhile().apply(this);
        }
        if(node.getCstExp() != null)
        {
            node.getCstExp().apply(this);
        }
        if(node.getDo() != null)
        {
            node.getDo().apply(this);
        }
        {
            List<PStatement> copy = new ArrayList<PStatement>(node.getStatement());
            for(PStatement e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getDone() != null)
        {
            node.getDone().apply(this);
        }
        outAWhileIdStatement(node);
    }

    public void inAPrintStatement(APrintStatement node)
    {
        defaultIn(node);
    }

    public void outAPrintStatement(APrintStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrintStatement(APrintStatement node)
    {
        inAPrintStatement(node);
        if(node.getPrint() != null)
        {
            node.getPrint().apply(this);
        }
        if(node.getCstExp() != null)
        {
            node.getCstExp().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAPrintStatement(node);
    }

    public void inAReadStatement(AReadStatement node)
    {
        defaultIn(node);
    }

    public void outAReadStatement(AReadStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReadStatement(AReadStatement node)
    {
        inAReadStatement(node);
        if(node.getRead() != null)
        {
            node.getRead().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAReadStatement(node);
    }

    public void inAIntDecDeclaration(AIntDecDeclaration node)
    {
        defaultIn(node);
    }

    public void outAIntDecDeclaration(AIntDecDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntDecDeclaration(AIntDecDeclaration node)
    {
        inAIntDecDeclaration(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getInt() != null)
        {
            node.getInt().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAIntDecDeclaration(node);
    }

    public void inAFloatDecDeclaration(AFloatDecDeclaration node)
    {
        defaultIn(node);
    }

    public void outAFloatDecDeclaration(AFloatDecDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFloatDecDeclaration(AFloatDecDeclaration node)
    {
        inAFloatDecDeclaration(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getFloat() != null)
        {
            node.getFloat().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAFloatDecDeclaration(node);
    }

    public void inAStringDecDeclaration(AStringDecDeclaration node)
    {
        defaultIn(node);
    }

    public void outAStringDecDeclaration(AStringDecDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringDecDeclaration(AStringDecDeclaration node)
    {
        inAStringDecDeclaration(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAStringDecDeclaration(node);
    }

    public void inACstPlusCstExp(ACstPlusCstExp node)
    {
        defaultIn(node);
    }

    public void outACstPlusCstExp(ACstPlusCstExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACstPlusCstExp(ACstPlusCstExp node)
    {
        inACstPlusCstExp(node);
        if(node.getCstExp() != null)
        {
            node.getCstExp().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outACstPlusCstExp(node);
    }

    public void inACstMinusCstExp(ACstMinusCstExp node)
    {
        defaultIn(node);
    }

    public void outACstMinusCstExp(ACstMinusCstExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACstMinusCstExp(ACstMinusCstExp node)
    {
        inACstMinusCstExp(node);
        if(node.getCstExp() != null)
        {
            node.getCstExp().apply(this);
        }
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outACstMinusCstExp(node);
    }

    public void inAFactorCstExp(AFactorCstExp node)
    {
        defaultIn(node);
    }

    public void outAFactorCstExp(AFactorCstExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFactorCstExp(AFactorCstExp node)
    {
        inAFactorCstExp(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outAFactorCstExp(node);
    }

    public void inACstMultFactor(ACstMultFactor node)
    {
        defaultIn(node);
    }

    public void outACstMultFactor(ACstMultFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACstMultFactor(ACstMultFactor node)
    {
        inACstMultFactor(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        if(node.getStar() != null)
        {
            node.getStar().apply(this);
        }
        if(node.getSterm() != null)
        {
            node.getSterm().apply(this);
        }
        outACstMultFactor(node);
    }

    public void inACstDivdFactor(ACstDivdFactor node)
    {
        defaultIn(node);
    }

    public void outACstDivdFactor(ACstDivdFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACstDivdFactor(ACstDivdFactor node)
    {
        inACstDivdFactor(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        if(node.getSlash() != null)
        {
            node.getSlash().apply(this);
        }
        if(node.getSterm() != null)
        {
            node.getSterm().apply(this);
        }
        outACstDivdFactor(node);
    }

    public void inATermFactor(ATermFactor node)
    {
        defaultIn(node);
    }

    public void outATermFactor(ATermFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermFactor(ATermFactor node)
    {
        inATermFactor(node);
        if(node.getSterm() != null)
        {
            node.getSterm().apply(this);
        }
        outATermFactor(node);
    }

    public void inATermSterm(ATermSterm node)
    {
        defaultIn(node);
    }

    public void outATermSterm(ATermSterm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermSterm(ATermSterm node)
    {
        inATermSterm(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outATermSterm(node);
    }

    public void inAStermSterm(AStermSterm node)
    {
        defaultIn(node);
    }

    public void outAStermSterm(AStermSterm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStermSterm(AStermSterm node)
    {
        inAStermSterm(node);
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getSterm() != null)
        {
            node.getSterm().apply(this);
        }
        outAStermSterm(node);
    }

    public void inACstIdTerm(ACstIdTerm node)
    {
        defaultIn(node);
    }

    public void outACstIdTerm(ACstIdTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACstIdTerm(ACstIdTerm node)
    {
        inACstIdTerm(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outACstIdTerm(node);
    }

    public void inACstIntTerm(ACstIntTerm node)
    {
        defaultIn(node);
    }

    public void outACstIntTerm(ACstIntTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACstIntTerm(ACstIntTerm node)
    {
        inACstIntTerm(node);
        if(node.getIntNumber() != null)
        {
            node.getIntNumber().apply(this);
        }
        outACstIntTerm(node);
    }

    public void inACstFloatTerm(ACstFloatTerm node)
    {
        defaultIn(node);
    }

    public void outACstFloatTerm(ACstFloatTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACstFloatTerm(ACstFloatTerm node)
    {
        inACstFloatTerm(node);
        if(node.getFloatNumber() != null)
        {
            node.getFloatNumber().apply(this);
        }
        outACstFloatTerm(node);
    }

    public void inACstStringTerm(ACstStringTerm node)
    {
        defaultIn(node);
    }

    public void outACstStringTerm(ACstStringTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACstStringTerm(ACstStringTerm node)
    {
        inACstStringTerm(node);
        if(node.getStringValue() != null)
        {
            node.getStringValue().apply(this);
        }
        outACstStringTerm(node);
    }

    public void inAParenTerm(AParenTerm node)
    {
        defaultIn(node);
    }

    public void outAParenTerm(AParenTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParenTerm(AParenTerm node)
    {
        inAParenTerm(node);
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getCstExp() != null)
        {
            node.getCstExp().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAParenTerm(node);
    }
}
