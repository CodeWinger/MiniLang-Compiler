/* This file was generated by SableCC (http://www.sablecc.org/). */

package MiniLangCompiler.analysis;

import java.util.*;
import MiniLangCompiler.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPProg().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAProgramProg(AProgramProg node)
    {
        defaultIn(node);
    }

    public void outAProgramProg(AProgramProg node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProgramProg(AProgramProg node)
    {
        inAProgramProg(node);
        {
            List<PDecl> copy = new ArrayList<PDecl>(node.getD());
            for(PDecl e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PStmt> copy = new ArrayList<PStmt>(node.getS());
            for(PStmt e : copy)
            {
                e.apply(this);
            }
        }
        outAProgramProg(node);
    }

    public void inAWhileStmt(AWhileStmt node)
    {
        defaultIn(node);
    }

    public void outAWhileStmt(AWhileStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWhileStmt(AWhileStmt node)
    {
        inAWhileStmt(node);
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        {
            List<PStmt> copy = new ArrayList<PStmt>(node.getR());
            for(PStmt e : copy)
            {
                e.apply(this);
            }
        }
        outAWhileStmt(node);
    }

    public void inAIfelseStmt(AIfelseStmt node)
    {
        defaultIn(node);
    }

    public void outAIfelseStmt(AIfelseStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfelseStmt(AIfelseStmt node)
    {
        inAIfelseStmt(node);
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        {
            List<PStmt> copy = new ArrayList<PStmt>(node.getM());
            for(PStmt e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PStmt> copy = new ArrayList<PStmt>(node.getR());
            for(PStmt e : copy)
            {
                e.apply(this);
            }
        }
        outAIfelseStmt(node);
    }

    public void inAIfStmt(AIfStmt node)
    {
        defaultIn(node);
    }

    public void outAIfStmt(AIfStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfStmt(AIfStmt node)
    {
        inAIfStmt(node);
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        {
            List<PStmt> copy = new ArrayList<PStmt>(node.getR());
            for(PStmt e : copy)
            {
                e.apply(this);
            }
        }
        outAIfStmt(node);
    }

    public void inAPrintStmt(APrintStmt node)
    {
        defaultIn(node);
    }

    public void outAPrintStmt(APrintStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrintStmt(APrintStmt node)
    {
        inAPrintStmt(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAPrintStmt(node);
    }

    public void inAReadStmt(AReadStmt node)
    {
        defaultIn(node);
    }

    public void outAReadStmt(AReadStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReadStmt(AReadStmt node)
    {
        inAReadStmt(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAReadStmt(node);
    }

    public void inAAssignStmt(AAssignStmt node)
    {
        defaultIn(node);
    }

    public void outAAssignStmt(AAssignStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignStmt(AAssignStmt node)
    {
        inAAssignStmt(node);
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        outAAssignStmt(node);
    }

    public void inAFloatDecl(AFloatDecl node)
    {
        defaultIn(node);
    }

    public void outAFloatDecl(AFloatDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFloatDecl(AFloatDecl node)
    {
        inAFloatDecl(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAFloatDecl(node);
    }

    public void inAIntDecl(AIntDecl node)
    {
        defaultIn(node);
    }

    public void outAIntDecl(AIntDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntDecl(AIntDecl node)
    {
        inAIntDecl(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIntDecl(node);
    }

    public void inAStringDecl(AStringDecl node)
    {
        defaultIn(node);
    }

    public void outAStringDecl(AStringDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringDecl(AStringDecl node)
    {
        inAStringDecl(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAStringDecl(node);
    }

    public void inAPlusExp(APlusExp node)
    {
        defaultIn(node);
    }

    public void outAPlusExp(APlusExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusExp(APlusExp node)
    {
        inAPlusExp(node);
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        outAPlusExp(node);
    }

    public void inAMinusExp(AMinusExp node)
    {
        defaultIn(node);
    }

    public void outAMinusExp(AMinusExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusExp(AMinusExp node)
    {
        inAMinusExp(node);
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        outAMinusExp(node);
    }

    public void inAMultExp(AMultExp node)
    {
        defaultIn(node);
    }

    public void outAMultExp(AMultExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultExp(AMultExp node)
    {
        inAMultExp(node);
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        outAMultExp(node);
    }

    public void inADivdExp(ADivdExp node)
    {
        defaultIn(node);
    }

    public void outADivdExp(ADivdExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivdExp(ADivdExp node)
    {
        inADivdExp(node);
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        outADivdExp(node);
    }

    public void inAUnaryExp(AUnaryExp node)
    {
        defaultIn(node);
    }

    public void outAUnaryExp(AUnaryExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUnaryExp(AUnaryExp node)
    {
        inAUnaryExp(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAUnaryExp(node);
    }

    public void inAParenExp(AParenExp node)
    {
        defaultIn(node);
    }

    public void outAParenExp(AParenExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParenExp(AParenExp node)
    {
        inAParenExp(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAParenExp(node);
    }

    public void inAIdExp(AIdExp node)
    {
        defaultIn(node);
    }

    public void outAIdExp(AIdExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdExp(AIdExp node)
    {
        inAIdExp(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIdExp(node);
    }

    public void inAIntExp(AIntExp node)
    {
        defaultIn(node);
    }

    public void outAIntExp(AIntExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntExp(AIntExp node)
    {
        inAIntExp(node);
        if(node.getIntNumber() != null)
        {
            node.getIntNumber().apply(this);
        }
        outAIntExp(node);
    }

    public void inAFloatExp(AFloatExp node)
    {
        defaultIn(node);
    }

    public void outAFloatExp(AFloatExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFloatExp(AFloatExp node)
    {
        inAFloatExp(node);
        if(node.getFloatNumber() != null)
        {
            node.getFloatNumber().apply(this);
        }
        outAFloatExp(node);
    }

    public void inAStringExp(AStringExp node)
    {
        defaultIn(node);
    }

    public void outAStringExp(AStringExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringExp(AStringExp node)
    {
        inAStringExp(node);
        if(node.getStringValue() != null)
        {
            node.getStringValue().apply(this);
        }
        outAStringExp(node);
    }
}
