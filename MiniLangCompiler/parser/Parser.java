/* This file was generated by SableCC (http://www.sablecc.org/). */

package MiniLangCompiler.parser;

import MiniLangCompiler.lexer.*;
import MiniLangCompiler.node.*;
import MiniLangCompiler.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList<Object> listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PProgram node1 = (PProgram) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AAprogram1Program */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list, false);
            }
            break;
            case 1: /* reduce AAprogram2Program */
            {
                ArrayList<Object> list = new1();
                push(goTo(0), list, false);
            }
            break;
            case 2: /* reduce AAprogram3Program */
            {
                ArrayList<Object> list = new2();
                push(goTo(0), list, false);
            }
            break;
            case 3: /* reduce AAprogram4Program */
            {
                ArrayList<Object> list = new3();
                push(goTo(0), list, false);
            }
            break;
            case 4: /* reduce AAssignStatement */
            {
                ArrayList<Object> list = new4();
                push(goTo(1), list, false);
            }
            break;
            case 5: /* reduce AAifelsestatement1Statement */
            {
                ArrayList<Object> list = new5();
                push(goTo(1), list, false);
            }
            break;
            case 6: /* reduce AAifelsestatement2Statement */
            {
                ArrayList<Object> list = new6();
                push(goTo(1), list, false);
            }
            break;
            case 7: /* reduce AAifelsestatement3Statement */
            {
                ArrayList<Object> list = new7();
                push(goTo(1), list, false);
            }
            break;
            case 8: /* reduce AAifelsestatement4Statement */
            {
                ArrayList<Object> list = new8();
                push(goTo(1), list, false);
            }
            break;
            case 9: /* reduce AAifstatement1Statement */
            {
                ArrayList<Object> list = new9();
                push(goTo(1), list, false);
            }
            break;
            case 10: /* reduce AAifstatement2Statement */
            {
                ArrayList<Object> list = new10();
                push(goTo(1), list, false);
            }
            break;
            case 11: /* reduce AAwhileidstatement1Statement */
            {
                ArrayList<Object> list = new11();
                push(goTo(1), list, false);
            }
            break;
            case 12: /* reduce AAwhileidstatement2Statement */
            {
                ArrayList<Object> list = new12();
                push(goTo(1), list, false);
            }
            break;
            case 13: /* reduce APrintStatement */
            {
                ArrayList<Object> list = new13();
                push(goTo(1), list, false);
            }
            break;
            case 14: /* reduce AReadStatement */
            {
                ArrayList<Object> list = new14();
                push(goTo(1), list, false);
            }
            break;
            case 15: /* reduce AIntDecDeclaration */
            {
                ArrayList<Object> list = new15();
                push(goTo(2), list, false);
            }
            break;
            case 16: /* reduce AFloatDecDeclaration */
            {
                ArrayList<Object> list = new16();
                push(goTo(2), list, false);
            }
            break;
            case 17: /* reduce AStringDecDeclaration */
            {
                ArrayList<Object> list = new17();
                push(goTo(2), list, false);
            }
            break;
            case 18: /* reduce ACstPlusCstExp */
            {
                ArrayList<Object> list = new18();
                push(goTo(3), list, false);
            }
            break;
            case 19: /* reduce ACstMinusCstExp */
            {
                ArrayList<Object> list = new19();
                push(goTo(3), list, false);
            }
            break;
            case 20: /* reduce AFactorCstExp */
            {
                ArrayList<Object> list = new20();
                push(goTo(3), list, false);
            }
            break;
            case 21: /* reduce ACstMultFactor */
            {
                ArrayList<Object> list = new21();
                push(goTo(4), list, false);
            }
            break;
            case 22: /* reduce ACstDivdFactor */
            {
                ArrayList<Object> list = new22();
                push(goTo(4), list, false);
            }
            break;
            case 23: /* reduce ATermFactor */
            {
                ArrayList<Object> list = new23();
                push(goTo(4), list, false);
            }
            break;
            case 24: /* reduce ATermSterm */
            {
                ArrayList<Object> list = new24();
                push(goTo(5), list, false);
            }
            break;
            case 25: /* reduce AStermSterm */
            {
                ArrayList<Object> list = new25();
                push(goTo(5), list, false);
            }
            break;
            case 26: /* reduce ACstIdTerm */
            {
                ArrayList<Object> list = new26();
                push(goTo(6), list, false);
            }
            break;
            case 27: /* reduce ACstIntTerm */
            {
                ArrayList<Object> list = new27();
                push(goTo(6), list, false);
            }
            break;
            case 28: /* reduce ACstFloatTerm */
            {
                ArrayList<Object> list = new28();
                push(goTo(6), list, false);
            }
            break;
            case 29: /* reduce ACstStringTerm */
            {
                ArrayList<Object> list = new29();
                push(goTo(6), list, false);
            }
            break;
            case 30: /* reduce AParenTerm */
            {
                ArrayList<Object> list = new30();
                push(goTo(6), list, false);
            }
            break;
            case 31: /* reduce ATerminal$Declaration */
            {
                ArrayList<Object> list = new31();
                push(goTo(7), list, true);
            }
            break;
            case 32: /* reduce ANonTerminal$Declaration */
            {
                ArrayList<Object> list = new32();
                push(goTo(7), list, true);
            }
            break;
            case 33: /* reduce ATerminal$Statement */
            {
                ArrayList<Object> list = new33();
                push(goTo(8), list, true);
            }
            break;
            case 34: /* reduce ANonTerminal$Statement */
            {
                ArrayList<Object> list = new34();
                push(goTo(8), list, true);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AAprogram1Program */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PProgram pprogramNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        }
        {
            // Block
        }

        pprogramNode1 = new AProgram(listNode2, listNode3);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AAprogram2Program */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        {
            // Block
        }

        pprogramNode1 = new AProgram(listNode3, listNode4);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AAprogram3Program */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList1.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pprogramNode1 = new AProgram(listNode2, listNode4);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AAprogram4Program */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList2.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pprogramNode1 = new AProgram(listNode3, listNode5);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AAssignStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        TId tidNode2;
        TEqual tequalNode3;
        PCstExp pcstexpNode4;
        TSemicolon tsemicolonNode5;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tequalNode3 = (TEqual)nodeArrayList2.get(0);
        pcstexpNode4 = (PCstExp)nodeArrayList3.get(0);
        tsemicolonNode5 = (TSemicolon)nodeArrayList4.get(0);

        pstatementNode1 = new AAssignStatement(tidNode2, tequalNode3, pcstexpNode4, tsemicolonNode5);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AAifelsestatement1Statement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        TIf tifNode2;
        PCstExp pcstexpNode3;
        TThen tthenNode4;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        TElse telseNode6;
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        TEndif tendifNode8;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        pcstexpNode3 = (PCstExp)nodeArrayList2.get(0);
        tthenNode4 = (TThen)nodeArrayList3.get(0);
        {
            // Block
        }
        telseNode6 = (TElse)nodeArrayList4.get(0);
        {
            // Block
        }
        tendifNode8 = (TEndif)nodeArrayList5.get(0);

        pstatementNode1 = new AIfElseStatement(tifNode2, pcstexpNode3, tthenNode4, listNode5, telseNode6, listNode7, tendifNode8);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AAifelsestatement2Statement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        TIf tifNode2;
        PCstExp pcstexpNode3;
        TThen tthenNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        TElse telseNode7;
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        TEndif tendifNode9;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        pcstexpNode3 = (PCstExp)nodeArrayList2.get(0);
        tthenNode4 = (TThen)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        telseNode7 = (TElse)nodeArrayList5.get(0);
        {
            // Block
        }
        tendifNode9 = (TEndif)nodeArrayList6.get(0);

        pstatementNode1 = new AIfElseStatement(tifNode2, pcstexpNode3, tthenNode4, listNode6, telseNode7, listNode8, tendifNode9);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AAifelsestatement3Statement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        TIf tifNode2;
        PCstExp pcstexpNode3;
        TThen tthenNode4;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        TElse telseNode6;
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        TEndif tendifNode9;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        pcstexpNode3 = (PCstExp)nodeArrayList2.get(0);
        tthenNode4 = (TThen)nodeArrayList3.get(0);
        {
            // Block
        }
        telseNode6 = (TElse)nodeArrayList4.get(0);
        {
            // Block
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        listNode7 = (LinkedList)nodeArrayList5.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }
        tendifNode9 = (TEndif)nodeArrayList6.get(0);

        pstatementNode1 = new AIfElseStatement(tifNode2, pcstexpNode3, tthenNode4, listNode5, telseNode6, listNode8, tendifNode9);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce AAifelsestatement4Statement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        TIf tifNode2;
        PCstExp pcstexpNode3;
        TThen tthenNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        TElse telseNode7;
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        TEndif tendifNode10;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        pcstexpNode3 = (PCstExp)nodeArrayList2.get(0);
        tthenNode4 = (TThen)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        telseNode7 = (TElse)nodeArrayList5.get(0);
        {
            // Block
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        listNode8 = (LinkedList)nodeArrayList6.get(0);
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }
        tendifNode10 = (TEndif)nodeArrayList7.get(0);

        pstatementNode1 = new AIfElseStatement(tifNode2, pcstexpNode3, tthenNode4, listNode6, telseNode7, listNode9, tendifNode10);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AAifstatement1Statement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        TIf tifNode2;
        PCstExp pcstexpNode3;
        TThen tthenNode4;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        TEndif tendifNode6;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        pcstexpNode3 = (PCstExp)nodeArrayList2.get(0);
        tthenNode4 = (TThen)nodeArrayList3.get(0);
        {
            // Block
        }
        tendifNode6 = (TEndif)nodeArrayList4.get(0);

        pstatementNode1 = new AIfStatement(tifNode2, pcstexpNode3, tthenNode4, listNode5, tendifNode6);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce AAifstatement2Statement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        TIf tifNode2;
        PCstExp pcstexpNode3;
        TThen tthenNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        TEndif tendifNode7;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        pcstexpNode3 = (PCstExp)nodeArrayList2.get(0);
        tthenNode4 = (TThen)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        tendifNode7 = (TEndif)nodeArrayList5.get(0);

        pstatementNode1 = new AIfStatement(tifNode2, pcstexpNode3, tthenNode4, listNode6, tendifNode7);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AAwhileidstatement1Statement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        TWhile twhileNode2;
        PCstExp pcstexpNode3;
        TDo tdoNode4;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        TDone tdoneNode6;
        twhileNode2 = (TWhile)nodeArrayList1.get(0);
        pcstexpNode3 = (PCstExp)nodeArrayList2.get(0);
        tdoNode4 = (TDo)nodeArrayList3.get(0);
        {
            // Block
        }
        tdoneNode6 = (TDone)nodeArrayList4.get(0);

        pstatementNode1 = new AWhileIdStatement(twhileNode2, pcstexpNode3, tdoNode4, listNode5, tdoneNode6);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce AAwhileidstatement2Statement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        TWhile twhileNode2;
        PCstExp pcstexpNode3;
        TDo tdoNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        TDone tdoneNode7;
        twhileNode2 = (TWhile)nodeArrayList1.get(0);
        pcstexpNode3 = (PCstExp)nodeArrayList2.get(0);
        tdoNode4 = (TDo)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        tdoneNode7 = (TDone)nodeArrayList5.get(0);

        pstatementNode1 = new AWhileIdStatement(twhileNode2, pcstexpNode3, tdoNode4, listNode6, tdoneNode7);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce APrintStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        TPrint tprintNode2;
        PCstExp pcstexpNode3;
        TSemicolon tsemicolonNode4;
        tprintNode2 = (TPrint)nodeArrayList1.get(0);
        pcstexpNode3 = (PCstExp)nodeArrayList2.get(0);
        tsemicolonNode4 = (TSemicolon)nodeArrayList3.get(0);

        pstatementNode1 = new APrintStatement(tprintNode2, pcstexpNode3, tsemicolonNode4);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AReadStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        TRead treadNode2;
        TId tidNode3;
        TSemicolon tsemicolonNode4;
        treadNode2 = (TRead)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tsemicolonNode4 = (TSemicolon)nodeArrayList3.get(0);

        pstatementNode1 = new AReadStatement(treadNode2, tidNode3, tsemicolonNode4);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce AIntDecDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaration pdeclarationNode1;
        {
            // Block
        TVar tvarNode2;
        TId tidNode3;
        TColon tcolonNode4;
        TInt tintNode5;
        TSemicolon tsemicolonNode6;
        tvarNode2 = (TVar)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tcolonNode4 = (TColon)nodeArrayList3.get(0);
        tintNode5 = (TInt)nodeArrayList4.get(0);
        tsemicolonNode6 = (TSemicolon)nodeArrayList5.get(0);

        pdeclarationNode1 = new AIntDecDeclaration(tvarNode2, tidNode3, tcolonNode4, tintNode5, tsemicolonNode6);
        }
	nodeList.add(pdeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce AFloatDecDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaration pdeclarationNode1;
        {
            // Block
        TVar tvarNode2;
        TId tidNode3;
        TColon tcolonNode4;
        TFloat tfloatNode5;
        TSemicolon tsemicolonNode6;
        tvarNode2 = (TVar)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tcolonNode4 = (TColon)nodeArrayList3.get(0);
        tfloatNode5 = (TFloat)nodeArrayList4.get(0);
        tsemicolonNode6 = (TSemicolon)nodeArrayList5.get(0);

        pdeclarationNode1 = new AFloatDecDeclaration(tvarNode2, tidNode3, tcolonNode4, tfloatNode5, tsemicolonNode6);
        }
	nodeList.add(pdeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AStringDecDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaration pdeclarationNode1;
        {
            // Block
        TVar tvarNode2;
        TId tidNode3;
        TColon tcolonNode4;
        TString tstringNode5;
        TSemicolon tsemicolonNode6;
        tvarNode2 = (TVar)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tcolonNode4 = (TColon)nodeArrayList3.get(0);
        tstringNode5 = (TString)nodeArrayList4.get(0);
        tsemicolonNode6 = (TSemicolon)nodeArrayList5.get(0);

        pdeclarationNode1 = new AStringDecDeclaration(tvarNode2, tidNode3, tcolonNode4, tstringNode5, tsemicolonNode6);
        }
	nodeList.add(pdeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce ACstPlusCstExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCstExp pcstexpNode1;
        {
            // Block
        PCstExp pcstexpNode2;
        TPlus tplusNode3;
        PFactor pfactorNode4;
        pcstexpNode2 = (PCstExp)nodeArrayList1.get(0);
        tplusNode3 = (TPlus)nodeArrayList2.get(0);
        pfactorNode4 = (PFactor)nodeArrayList3.get(0);

        pcstexpNode1 = new ACstPlusCstExp(pcstexpNode2, tplusNode3, pfactorNode4);
        }
	nodeList.add(pcstexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce ACstMinusCstExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCstExp pcstexpNode1;
        {
            // Block
        PCstExp pcstexpNode2;
        TMinus tminusNode3;
        PFactor pfactorNode4;
        pcstexpNode2 = (PCstExp)nodeArrayList1.get(0);
        tminusNode3 = (TMinus)nodeArrayList2.get(0);
        pfactorNode4 = (PFactor)nodeArrayList3.get(0);

        pcstexpNode1 = new ACstMinusCstExp(pcstexpNode2, tminusNode3, pfactorNode4);
        }
	nodeList.add(pcstexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AFactorCstExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCstExp pcstexpNode1;
        {
            // Block
        PFactor pfactorNode2;
        pfactorNode2 = (PFactor)nodeArrayList1.get(0);

        pcstexpNode1 = new AFactorCstExp(pfactorNode2);
        }
	nodeList.add(pcstexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce ACstMultFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        PFactor pfactorNode2;
        TStar tstarNode3;
        PSterm pstermNode4;
        pfactorNode2 = (PFactor)nodeArrayList1.get(0);
        tstarNode3 = (TStar)nodeArrayList2.get(0);
        pstermNode4 = (PSterm)nodeArrayList3.get(0);

        pfactorNode1 = new ACstMultFactor(pfactorNode2, tstarNode3, pstermNode4);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce ACstDivdFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        PFactor pfactorNode2;
        TSlash tslashNode3;
        PSterm pstermNode4;
        pfactorNode2 = (PFactor)nodeArrayList1.get(0);
        tslashNode3 = (TSlash)nodeArrayList2.get(0);
        pstermNode4 = (PSterm)nodeArrayList3.get(0);

        pfactorNode1 = new ACstDivdFactor(pfactorNode2, tslashNode3, pstermNode4);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce ATermFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        PSterm pstermNode2;
        pstermNode2 = (PSterm)nodeArrayList1.get(0);

        pfactorNode1 = new ATermFactor(pstermNode2);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce ATermSterm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSterm pstermNode1;
        {
            // Block
        PTerm ptermNode2;
        ptermNode2 = (PTerm)nodeArrayList1.get(0);

        pstermNode1 = new ATermSterm(ptermNode2);
        }
	nodeList.add(pstermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce AStermSterm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSterm pstermNode1;
        {
            // Block
        TMinus tminusNode2;
        PSterm pstermNode3;
        tminusNode2 = (TMinus)nodeArrayList1.get(0);
        pstermNode3 = (PSterm)nodeArrayList2.get(0);

        pstermNode1 = new AStermSterm(tminusNode2, pstermNode3);
        }
	nodeList.add(pstermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce ACstIdTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        ptermNode1 = new ACstIdTerm(tidNode2);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce ACstIntTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        TIntNumber tintnumberNode2;
        tintnumberNode2 = (TIntNumber)nodeArrayList1.get(0);

        ptermNode1 = new ACstIntTerm(tintnumberNode2);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce ACstFloatTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        TFloatNumber tfloatnumberNode2;
        tfloatnumberNode2 = (TFloatNumber)nodeArrayList1.get(0);

        ptermNode1 = new ACstFloatTerm(tfloatnumberNode2);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce ACstStringTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        TStringValue tstringvalueNode2;
        tstringvalueNode2 = (TStringValue)nodeArrayList1.get(0);

        ptermNode1 = new ACstStringTerm(tstringvalueNode2);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce AParenTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        TLPar tlparNode2;
        PCstExp pcstexpNode3;
        TRPar trparNode4;
        tlparNode2 = (TLPar)nodeArrayList1.get(0);
        pcstexpNode3 = (PCstExp)nodeArrayList2.get(0);
        trparNode4 = (TRPar)nodeArrayList3.get(0);

        ptermNode1 = new AParenTerm(tlparNode2, pcstexpNode3, trparNode4);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce ATerminal$Declaration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PDeclaration pdeclarationNode1;
        pdeclarationNode1 = (PDeclaration)nodeArrayList1.get(0);
	if(pdeclarationNode1 != null)
	{
	  listNode2.add(pdeclarationNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce ANonTerminal$Declaration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PDeclaration pdeclarationNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pdeclarationNode2 = (PDeclaration)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pdeclarationNode2 != null)
	{
	  listNode3.add(pdeclarationNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce ATerminal$Statement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PStatement pstatementNode1;
        pstatementNode1 = (PStatement)nodeArrayList1.get(0);
	if(pstatementNode1 != null)
	{
	  listNode2.add(pstatementNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce ANonTerminal$Statement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PStatement pstatementNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pstatementNode2 = (PStatement)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pstatementNode2 != null)
	{
	  listNode3.add(pstatementNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, REDUCE, 0}, {1, SHIFT, 1}, {5, SHIFT, 2}, {8, SHIFT, 3}, {9, SHIFT, 4}, {10, SHIFT, 5}, {24, SHIFT, 6}, },
			{{-1, ERROR, 1}, {19, SHIFT, 12}, {20, SHIFT, 13}, {22, SHIFT, 14}, {23, SHIFT, 15}, {24, SHIFT, 16}, {25, SHIFT, 17}, },
			{{-1, ERROR, 2}, {19, SHIFT, 12}, {20, SHIFT, 13}, {22, SHIFT, 14}, {23, SHIFT, 15}, {24, SHIFT, 16}, {25, SHIFT, 17}, },
			{{-1, ERROR, 3}, {19, SHIFT, 12}, {20, SHIFT, 13}, {22, SHIFT, 14}, {23, SHIFT, 15}, {24, SHIFT, 16}, {25, SHIFT, 17}, },
			{{-1, ERROR, 4}, {24, SHIFT, 24}, },
			{{-1, ERROR, 5}, {24, SHIFT, 25}, },
			{{-1, ERROR, 6}, {0, SHIFT, 26}, },
			{{-1, ERROR, 7}, {26, ACCEPT, -1}, },
			{{-1, REDUCE, 33}, },
			{{-1, REDUCE, 31}, },
			{{-1, REDUCE, 1}, {1, SHIFT, 1}, {5, SHIFT, 2}, {8, SHIFT, 3}, {9, SHIFT, 4}, {10, SHIFT, 5}, {24, SHIFT, 6}, },
			{{-1, REDUCE, 2}, {1, SHIFT, 1}, {5, SHIFT, 2}, {8, SHIFT, 3}, {9, SHIFT, 4}, {24, SHIFT, 6}, },
			{{-1, ERROR, 12}, {19, SHIFT, 12}, {20, SHIFT, 13}, {22, SHIFT, 14}, {23, SHIFT, 15}, {24, SHIFT, 16}, {25, SHIFT, 17}, },
			{{-1, ERROR, 13}, {19, SHIFT, 12}, {20, SHIFT, 13}, {22, SHIFT, 14}, {23, SHIFT, 15}, {24, SHIFT, 16}, {25, SHIFT, 17}, },
			{{-1, REDUCE, 27}, },
			{{-1, REDUCE, 28}, },
			{{-1, REDUCE, 26}, },
			{{-1, REDUCE, 29}, },
			{{-1, ERROR, 18}, {2, SHIFT, 32}, {18, SHIFT, 33}, {19, SHIFT, 34}, },
			{{-1, REDUCE, 20}, {16, SHIFT, 35}, {17, SHIFT, 36}, },
			{{-1, REDUCE, 23}, },
			{{-1, REDUCE, 24}, },
			{{-1, ERROR, 22}, {6, SHIFT, 37}, {18, SHIFT, 33}, {19, SHIFT, 34}, },
			{{-1, ERROR, 23}, {14, SHIFT, 38}, {18, SHIFT, 33}, {19, SHIFT, 34}, },
			{{-1, ERROR, 24}, {14, SHIFT, 39}, },
			{{-1, ERROR, 25}, {15, SHIFT, 40}, },
			{{-1, ERROR, 26}, {19, SHIFT, 12}, {20, SHIFT, 13}, {22, SHIFT, 14}, {23, SHIFT, 15}, {24, SHIFT, 16}, {25, SHIFT, 17}, },
			{{-1, REDUCE, 32}, },
			{{-1, REDUCE, 3}, {1, SHIFT, 1}, {5, SHIFT, 2}, {8, SHIFT, 3}, {9, SHIFT, 4}, {24, SHIFT, 6}, },
			{{-1, REDUCE, 34}, },
			{{-1, REDUCE, 25}, },
			{{-1, ERROR, 31}, {18, SHIFT, 33}, {19, SHIFT, 34}, {21, SHIFT, 42}, },
			{{-1, ERROR, 32}, {1, SHIFT, 1}, {3, SHIFT, 43}, {4, SHIFT, 44}, {5, SHIFT, 2}, {8, SHIFT, 3}, {9, SHIFT, 4}, {24, SHIFT, 6}, },
			{{-1, ERROR, 33}, {19, SHIFT, 12}, {20, SHIFT, 13}, {22, SHIFT, 14}, {23, SHIFT, 15}, {24, SHIFT, 16}, {25, SHIFT, 17}, },
			{{-1, ERROR, 34}, {19, SHIFT, 12}, {20, SHIFT, 13}, {22, SHIFT, 14}, {23, SHIFT, 15}, {24, SHIFT, 16}, {25, SHIFT, 17}, },
			{{-1, ERROR, 35}, {19, SHIFT, 12}, {20, SHIFT, 13}, {22, SHIFT, 14}, {23, SHIFT, 15}, {24, SHIFT, 16}, {25, SHIFT, 17}, },
			{{-1, ERROR, 36}, {19, SHIFT, 12}, {20, SHIFT, 13}, {22, SHIFT, 14}, {23, SHIFT, 15}, {24, SHIFT, 16}, {25, SHIFT, 17}, },
			{{-1, ERROR, 37}, {1, SHIFT, 1}, {5, SHIFT, 2}, {7, SHIFT, 50}, {8, SHIFT, 3}, {9, SHIFT, 4}, {24, SHIFT, 6}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 14}, },
			{{-1, ERROR, 40}, {11, SHIFT, 52}, {12, SHIFT, 53}, {13, SHIFT, 54}, },
			{{-1, ERROR, 41}, {14, SHIFT, 55}, {18, SHIFT, 33}, {19, SHIFT, 34}, },
			{{-1, REDUCE, 30}, },
			{{-1, ERROR, 43}, {1, SHIFT, 1}, {4, SHIFT, 56}, {5, SHIFT, 2}, {8, SHIFT, 3}, {9, SHIFT, 4}, {24, SHIFT, 6}, },
			{{-1, REDUCE, 9}, },
			{{-1, ERROR, 45}, {1, SHIFT, 1}, {3, SHIFT, 58}, {4, SHIFT, 59}, {5, SHIFT, 2}, {8, SHIFT, 3}, {9, SHIFT, 4}, {24, SHIFT, 6}, },
			{{-1, REDUCE, 18}, {16, SHIFT, 35}, {17, SHIFT, 36}, },
			{{-1, REDUCE, 19}, {16, SHIFT, 35}, {17, SHIFT, 36}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 22}, },
			{{-1, REDUCE, 11}, },
			{{-1, ERROR, 51}, {1, SHIFT, 1}, {5, SHIFT, 2}, {7, SHIFT, 60}, {8, SHIFT, 3}, {9, SHIFT, 4}, {24, SHIFT, 6}, },
			{{-1, ERROR, 52}, {14, SHIFT, 61}, },
			{{-1, ERROR, 53}, {14, SHIFT, 62}, },
			{{-1, ERROR, 54}, {14, SHIFT, 63}, },
			{{-1, REDUCE, 4}, },
			{{-1, REDUCE, 5}, },
			{{-1, ERROR, 57}, {1, SHIFT, 1}, {4, SHIFT, 64}, {5, SHIFT, 2}, {8, SHIFT, 3}, {9, SHIFT, 4}, {24, SHIFT, 6}, },
			{{-1, ERROR, 58}, {1, SHIFT, 1}, {4, SHIFT, 65}, {5, SHIFT, 2}, {8, SHIFT, 3}, {9, SHIFT, 4}, {24, SHIFT, 6}, },
			{{-1, REDUCE, 10}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 15}, },
			{{-1, REDUCE, 16}, },
			{{-1, REDUCE, 17}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 6}, },
			{{-1, ERROR, 66}, {1, SHIFT, 1}, {4, SHIFT, 67}, {5, SHIFT, 2}, {8, SHIFT, 3}, {9, SHIFT, 4}, {24, SHIFT, 6}, },
			{{-1, REDUCE, 8}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 7}, },
			{{-1, 8}, {11, 29}, {28, 29}, {45, 29}, {51, 29}, {57, 29}, {66, 29}, },
			{{-1, 9}, {10, 27}, },
			{{-1, 18}, {2, 22}, {3, 23}, {13, 31}, {26, 41}, },
			{{-1, 19}, {33, 46}, {34, 47}, },
			{{-1, 20}, {12, 30}, {35, 48}, {36, 49}, },
			{{-1, 21}, },
			{{-1, 10}, },
			{{-1, 11}, {10, 28}, {32, 45}, {37, 51}, {43, 57}, {58, 66}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'if', 'while', 'print', 'read', 'var', id, EOF",
			"expecting: '-', '(', int number, float number, id, string value",
			"expecting: id",
			"expecting: '='",
			"expecting: EOF",
			"expecting: 'if', 'else', 'endif', 'while', 'done', 'print', 'read', id, EOF",
			"expecting: 'if', 'while', 'print', 'read', id, EOF",
			"expecting: 'then', 'do', ';', '*', '/', '+', '-', ')'",
			"expecting: 'then', '+', '-'",
			"expecting: 'do', '+', '-'",
			"expecting: ';', '+', '-'",
			"expecting: ';'",
			"expecting: ':'",
			"expecting: '+', '-', ')'",
			"expecting: 'if', 'else', 'endif', 'while', 'print', 'read', id",
			"expecting: 'if', 'while', 'done', 'print', 'read', id",
			"expecting: 'int', 'float', 'string'",
			"expecting: 'if', 'endif', 'while', 'print', 'read', id",
        };*/
    private static int[] errors;
/*      {
			0, 1, 1, 1, 2, 2, 3, 4, 5, 0, 0, 6, 1, 1, 7, 7, 7, 7, 8, 7, 7, 7, 9, 10, 11, 12, 1, 0, 6, 5, 7, 13, 14, 1, 1, 1, 1, 15, 5, 5, 16, 10, 7, 17, 5, 14, 7, 7, 7, 7, 5, 15, 11, 11, 11, 5, 5, 17, 17, 5, 5, 0, 0, 0, 5, 5, 17, 5, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
